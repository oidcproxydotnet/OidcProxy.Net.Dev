# Default values for generic-deployment.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# based on the useHttps value, the container port will be set to http or https
useHttps: false

containerPorts:
  http: 8080
  https: 8443

service:
  type: ClusterIP
  ports:
    http: 80
    https: 443

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: true
  className: nginx
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: '{{ include "generic-deployment.fullname" . }}.{{ $.Values.domain }}'
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
   - secretName: ""
     hosts:
       - '{{ include "generic-deployment.fullname" . }}.{{ $.Values.domain }}'


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

env: {}
  # varName1: value1
  # varName2: value2

# sample http probes
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
#     scheme: HTTP
#   initialDelaySeconds: 10
#   periodSeconds: 10
#   timeoutSeconds: 1
#   failureThreshold: 3
# readinessProbe:
#   httpGet:
#     path: /
#     port: http
#     scheme: HTTP
#   initialDelaySeconds: 5
#   periodSeconds: 5
#   timeoutSeconds: 1
#   successThreshold: 1
#   failureThreshold: 3
# startupProbe:
#   httpGet:
#     path: /
#     port: http
#     scheme: HTTP
#   initialDelaySeconds: 0
#   periodSeconds: 10
#   timeoutSeconds: 1
#   failureThreshold: 30

# # sample https probes
# livenessProbe:
#   httpGet:
#     path: /health
#     port: https
#     scheme: HTTPS
#   initialDelaySeconds: 10
#   periodSeconds: 10
#   timeoutSeconds: 1
#   failureThreshold: 3
# readinessProbe:
#   httpGet:
#     path: /ready
#     port: https
#     scheme: HTTPS
#   initialDelaySeconds: 5
#   periodSeconds: 5
#   timeoutSeconds: 1
#   successThreshold: 1
#   failureThreshold: 3
# startupProbe:
#   httpGet:
#     path: /startup
#     port: https
#     scheme: HTTPS
#   initialDelaySeconds: 0
#   periodSeconds: 10
#   timeoutSeconds: 1
#   failureThreshold: 30

config:
  mountPath:
  data: {}
